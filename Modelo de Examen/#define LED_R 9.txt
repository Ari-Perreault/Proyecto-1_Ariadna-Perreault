#define TRIG_PIN 7
#define ECHO_PIN 6
#define BOTON 2

#define LED_R 3
#define LED_G 5
#define LED_B 4

#define BUZZER 10

long duracion;
int distancia;

bool alarma = false;


void setup() {
  Serial.begin(9600);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BOTON, INPUT_PULLUP);

  pinMode(LED_R, OUTPUT);
  pinMode(LED_G, OUTPUT);
  pinMode(LED_B, OUTPUT);
  pinMode(BUZZER, OUTPUT);
}

void loop() {


  if (digitalRead(BOTON) == LOW) {
    alarma = !alarma;
    delay(200); // antirrebote
  }

 

  // Mostrar estado de la alarma
  if (alarma) {
    Serial.println("ALARMA ACTIVADA");
  } else {
    Serial.println("ALARMA DESACTIVADA");
  }


  digitalWrite(TRIG_PIN, LOW);
      delay(10);
      digitalWrite(TRIG_PIN, HIGH);
      delay(10);
      digitalWrite(TRIG_PIN, LOW);

      duracion = pulseIn(ECHO_PIN, HIGH);

    distancia = duracion * 0.034 / 2;

      Serial.print("Distancia actual del objeto: ");
    Serial.print(distancia);
    Serial.println(" cm");

  delay(500);

   if (!alarma) {
    // Alarma apagada: LED azul, buzzer apagado
    analogWrite(LED_R, 0);
    analogWrite(LED_G, 0);
    digitalWrite(LED_B, HIGH);
    }else {
    // Alarma encendida â†’ verificamos distancia
    if (distancia > 150) {

      analogWrite(LED_R, 0);
      analogWrite(LED_G, 255);
      analogWrite(LED_B, 0);
      digitalWrite(BUZZER, LOW);

    } else if (distancia > 50) {

      analogWrite(LED_R, 255);
      analogWrite(LED_G, 140);
      analogWrite(LED_B, 0);

      digitalWrite(BUZZER, HIGH);
      delay(500);
      digitalWrite(BUZZER, LOW);
      delay(500);

    } else {

      analogWrite(LED_R, 255);
      analogWrite(LED_G, 0);
      analogWrite(LED_B, 0);

      digitalWrite(BUZZER, HIGH);
      delay(50);
      digitalWrite(BUZZER, LOW);
      delay(50);
    }
  }

  delay(100);
}
